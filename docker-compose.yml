version: '3.8'

services:
  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: chaintrust-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - PRIVATE_KEY=${PRIVATE_KEY}
      - POLYGON_MUMBAI_RPC=${POLYGON_MUMBAI_RPC}
      - POLYGON_MAINNET_RPC=${POLYGON_MAINNET_RPC}
      - POLYGONSCAN_API_KEY=${POLYGONSCAN_API_KEY}
      - IPFS_PROJECT_ID=${IPFS_PROJECT_ID}
      - IPFS_PROJECT_SECRET=${IPFS_PROJECT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./uploads:/app/uploads
      - ./deployed-addresses.json:/app/deployed-addresses.json
    depends_on:
      - postgres
      - redis
    networks:
      - chaintrust-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chaintrust-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:3001/api
      - NEXT_PUBLIC_ALCHEMY_API_KEY=${ALCHEMY_API_KEY}
      - NEXT_PUBLIC_INFURA_API_KEY=${INFURA_API_KEY}
      - NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=${WALLETCONNECT_PROJECT_ID}
    depends_on:
      - backend
    networks:
      - chaintrust-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chaintrust-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=chaintrust
      - POSTGRES_USER=chaintrust
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chaintrust-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chaintrust"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chaintrust-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - chaintrust-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: chaintrust-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - chaintrust-network
    restart: unless-stopped

  # Blockchain Node (Optional - for local development)
  hardhat:
    build:
      context: .
      dockerfile: Dockerfile.hardhat
    container_name: chaintrust-hardhat
    ports:
      - "8545:8545"
    environment:
      - NODE_ENV=development
    volumes:
      - ./contracts:/app/contracts
      - ./scripts:/app/scripts
      - ./test:/app/test
    networks:
      - chaintrust-network
    profiles:
      - dev
    command: npx hardhat node --hostname 0.0.0.0

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  chaintrust-network:
    driver: bridge